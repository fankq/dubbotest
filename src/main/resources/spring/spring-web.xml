<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 扫描controller(后端控制器),并且扫描其中的注解-->


    <mvc:annotation-driven />




    <context:component-scan base-package="ssm.controller"/>


    <!--
        <mvc:annotation-driven conversion-service="conversionService1"/>
    -->
    <!--请求参数绑定失败，加载类型转换器-->
<!--
    是同时注册了id为”ConversionService“和mvc:resources的问题。如果你把”ConversionService“的bean id修改成另一个名称，就不会报错了。
-->
    <!--<bean id="conversionService1" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="ssm.converter.StringToDateConverter"/>
            </list>
        </property>
    </bean>-->

    <!-- 定义无Controller的path<->view直接映射 -->
    <mvc:view-controller path="/" view-name="redirect:hello"/>
    <!--配置JSP　显示ViewResolver(视图解析器)-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- 开启驱动注解 可以将request参数与绑定到controller参数上-->
    <!--<mvc:annotation-driven/>-->
    <!--显示加载处理器适配器，以及处理器映射器-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>

    <!-- 服务扫描-->
    <context:component-scan base-package="ssm.service" >
        <context:exclude-filter type="regex" expression=".model.*"></context:exclude-filter>
    </context:component-scan>
    <!--静态资源默认servlet配置
       1、加入对静态资源的处理:js,css,gif,png
       2、允许使用"/"做整体映射
       -->
    <mvc:default-servlet-handler/>
    <mvc:resources mapping="/statics/**" location="/WEB-INF/statics/" /><!--可配置多个 -->

    <!--spring mvc 子线程配置 为了提高效率有的项目需要线程来完成相关功能，不要可忽略-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="5" />
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="50" />
        <!-- 队列最大长度 -->
        <property name="queueCapacity" value="1000" />
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="60" />
    </bean>
    <!-- 拦截器配置(可配置多个)，拦截顺序：先执行后定义的，排在第一位的最后执行。-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/admin/**" />&lt;!&ndash;需要拦截的控制器&ndash;&gt;
            <mvc:exclude-mapping path="/admin/login"/>
           <mvc:exclude-mapping path="/admin/index"/>
            <mvc:exclude-mapping path="/admin/loginIn"/>&lt;!&ndash;不需要拦截的控制器&ndash;&gt;
         <bean class="com.example.interceptor.LogInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>-->
   <!-- <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/loginForm"/>
            <mvc:exclude-mapping path="/statics/**"/>
            <mvc:exclude-mapping path="/error/**"/>

            <bean class="ssm.interceptor.AuthorizedInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!-- 上传功能配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxUploadSize" value="10485760000" />
        <property name="maxInMemorySize" value="40960" />
    </bean>
    <!-- 开启注解扫描 -->
<!--
    <context:component-scan base-package="ssm.annotation"></context:component-scan>
-->

    <!-- 开启aop注解方式 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
   <!-- 通过Spring mvc框架提供的SimpleMappingExceptionResolver来集中处理，该类可以捕获所有控制器抛出的异常，并将它映射到配置的视图中。

    用法配置如下：-->
    <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.sql.SQLException">/error/error_500</prop><!--返回页面的相对于view的根路径-->
                <prop key="ssm.controller.model.BusinessException">/error/error_500</prop>
                <prop key="java.lang.RuntimeException">/error/error_500</prop>
                <prop key="java.lang.NullPointerException">/error/error_500</prop>
                <prop key="java.io.FileNotFoundException">/error/error_500</prop>

            </props>
        </property>
        <!-- 相关状态码对应的错误页面 -->
        <property name="statusCodes">
            <props>
                <prop key="/error/500">500</prop><!--request路径-->
                <prop key="/error/404">404</prop>
            </props>
        </property>

        <property name="defaultErrorView">
            <value>failure</value>
        </property>

        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="DEBUG" />
        <!-- 默认HTTP状态码 -->
        <property name="defaultStatusCode" value="500" />


    </bean>

    <!--&lt;!&ndash; 提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 -->


    <dubbo:application name="dubbo_consumer1"></dubbo:application>
    <dubbo:registry address="zookeeper://192.168.1.6:2181" ></dubbo:registry>
    <dubbo:service interface="ssm.service.registry.TestRegistryService2" ref="testRegistryService2"></dubbo:service>

    <!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:reference interface="ssm.service.registry.TestRegistryService" id="testRegistryService"></dubbo:reference>

    <dubbo:consumer check="false" />


    <dubbo:protocol name="dubbo" port="20881" />


    <!-- 要引用的服务 -->
    <!--注册服务-->






</beans>